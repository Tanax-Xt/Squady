/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register */
    post: operations["register_auth_register_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login */
    post: operations["login_auth_login_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/otp/send": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send Otp */
    post: operations["send_otp_auth_otp_send_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Current User */
    get: operations["get_current_user_users_me_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/username": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update Current User Username */
    patch: operations["update_current_user_username_users_me_username_patch"];
    trace?: never;
  };
  "/users/me/password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update Current User Password */
    patch: operations["update_current_user_password_users_me_password_patch"];
    trace?: never;
  };
  "/users/me/role": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update Current User Role */
    patch: operations["update_current_user_role_users_me_role_patch"];
    trace?: never;
  };
  "/users/me/verify": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Verify */
    post: operations["verify_users_me_verify_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/resumes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Current User Resumes */
    get: operations["get_current_user_resumes_users_me_resumes_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/personal": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Current User Personal Data */
    get: operations["get_current_user_personal_data_users_me_personal_get"];
    put?: never;
    /** Set Current User Personal Data */
    post: operations["set_current_user_personal_data_users_me_personal_post"];
    delete?: never;
    options?: never;
    head?: never;
    /** Update Current User Personal Data */
    patch: operations["update_current_user_personal_data_users_me_personal_patch"];
    trace?: never;
  };
  "/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Users */
    get: operations["get_users_users_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{username}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get User */
    get: operations["get_user_users__username__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{username}/resumes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get User Resumes */
    get: operations["get_user_resumes_users__username__resumes_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/resumes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create Resume */
    post: operations["create_resume_resumes_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/resumes/roles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Roles */
    get: operations["get_roles_resumes_roles_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/resumes/skills": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Skills */
    get: operations["get_skills_resumes_skills_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/resumes/{resume_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Resume */
    get: operations["get_resume_resumes__resume_id__get"];
    /** Update Resume */
    put: operations["update_resume_resumes__resume_id__put"];
    post?: never;
    /** Delete Resume */
    delete: operations["delete_resume_resumes__resume_id__delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/resumes/parse/github": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Parse Resume From Github */
    post: operations["parse_resume_from_github_resumes_parse_github_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/resumes/parse/pdf": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Parse Resume From Pdf */
    post: operations["parse_resume_from_pdf_resumes_parse_pdf_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/resumes/parse/hh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Parse Resume From Headhunter */
    post: operations["parse_resume_from_headhunter_resumes_parse_hh_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Teams */
    get: operations["get_teams_teams_get"];
    put?: never;
    /** Create Team */
    post: operations["create_team_teams_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/my": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get My Teams */
    get: operations["get_my_teams_teams_my_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Team */
    get: operations["get_team_teams__team_id__get"];
    /** Update Team */
    put: operations["update_team_teams__team_id__put"];
    post?: never;
    /** Delete Team */
    delete: operations["delete_team_teams__team_id__delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Team Members */
    get: operations["get_team_members_teams__team_id__members_get"];
    put?: never;
    /** Add Team Member */
    post: operations["add_team_member_teams__team_id__members_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/members/{user_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Remove Team Member */
    delete: operations["remove_team_member_teams__team_id__members__user_id__delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * AccessTokenResponse
     * @description Represents a response containing access token and its expiration datetime.
     */
    AccessTokenResponse: {
      /** Access Token */
      access_token: string;
      /**
       * Token Type
       * @default bearer
       */
      token_type: string;
      /**
       * Expires At
       * Format: date-time
       */
      expires_at: string;
    };
    /** AchievementItem */
    AchievementItem: {
      /**
       * Title
       * @description Resume item title
       */
      title: string;
      /**
       * The year of the achievement
       * @description The year of achievement should be no more than the current year.
       */
      year: number;
    };
    /** AdditionalEducationItem */
    AdditionalEducationItem: {
      /**
       * Title
       * @description Resume item title
       */
      title: string;
      /**
       * Date
       * @description Date in ISO 8601 format: YYYY-MM. Should be maximum 80 years ago and 10 years in the future.
       */
      start_date: string;
      /**
       * Date
       * @description Date in ISO 8601 format: YYYY-MM. Should be maximum 80 years ago and 10 years in the future.
       */
      end_date: string;
    };
    /** Body_login_auth_login_post */
    Body_login_auth_login_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** Body_parse_resume_from_pdf_resumes_parse_pdf_post */
    Body_parse_resume_from_pdf_resumes_parse_pdf_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /**
     * CurrentUserPasswordUpdateRequest
     * @description Represents the user password request details.
     */
    CurrentUserPasswordUpdateRequest: {
      /** Old Password */
      old_password: string;
      /** New Password */
      new_password: string;
    };
    /** CurrentUserPersonalDataRequest */
    CurrentUserPersonalDataRequest: {
      /**
       * User full name
       * @description User's full name, consisting of 2 or 3 words with only alphabetic characters, no abbreviations.
       */
      full_name: string;
      /**
       * User birth date
       * Format: date
       * @description User's birth date, must be between 6 and 100 years old.
       */
      birth_date: string;
      /**
       * Telegram username
       * @description Telegram username 5–32 characters long.
       */
      telegram: string;
      /** City */
      city?: string | null;
      /** About */
      about?: string | null;
    };
    /** CurrentUserPersonalDataResponse */
    CurrentUserPersonalDataResponse: {
      /** Full Name */
      full_name: string | null;
      /** Birth Date */
      birth_date: string | null;
      /** City */
      city: string | null;
      /** About */
      about: string | null;
      /** Telegram */
      telegram: string | null;
    };
    /** CurrentUserPersonalDataUpdateRequest */
    CurrentUserPersonalDataUpdateRequest: {
      /** City */
      city?: string | null;
      /** About */
      about?: string | null;
      /**
       * Telegram username
       * @description Telegram username 5–32 characters long.
       */
      telegram?: string;
    };
    /**
     * CurrentUserResponse
     * @description Represents the private response data for a user.
     */
    CurrentUserResponse: {
      /** Full Name */
      full_name: string | null;
      /** Birth Date */
      birth_date: string | null;
      /** City */
      city: string | null;
      /** About */
      about: string | null;
      /** Telegram */
      telegram: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Entity ID
       * Format: uuid4
       * @description Unique identifier for the entity in UUID4 format.
       */
      id: string;
      /** Username */
      username: string;
      /**
       * User email
       * Format: email
       */
      email: string;
      role: components["schemas"]["UserRole"] | null;
      /** Is Verified */
      is_verified: boolean;
      /** Is Verified Agent */
      is_verified_agent: boolean | null;
      stats: components["schemas"]["UserStatsResponse"];
    };
    /**
     * CurrentUserRoleUpdateRequest
     * @description Represents the user password request details.
     */
    CurrentUserRoleUpdateRequest: {
      role: components["schemas"]["UserRole"];
    };
    /**
     * CurrentUserUsernameUpdateRequest
     * @description Represents the user username request details.
     */
    CurrentUserUsernameUpdateRequest: {
      /** Username */
      username: string;
    };
    /**
     * CurrentUserVerifyRequest
     * @description Represents a request for verifying a One-Time Password (OTP).
     */
    CurrentUserVerifyRequest: {
      /** Otp */
      otp: number;
    };
    /**
     * EducationType
     * @enum {string}
     */
    EducationType:
      | "primary_school"
      | "medium_school"
      | "high_school"
      | "vocational_school"
      | "bachelor"
      | "master";
    /** ExperienceItem */
    ExperienceItem: {
      /**
       * Title
       * @description Resume item title
       */
      title: string;
      /** Description */
      description: string;
      /**
       * Date
       * @description Date in ISO 8601 format: YYYY-MM. Should be maximum 80 years ago and 10 years in the future.
       */
      start_date: string;
      /** End Date */
      end_date?: string | null;
      /**
       * Is Work
       * @default false
       */
      is_work: boolean;
      /** Company */
      company?: string | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** MemberResponse */
    MemberResponse: {
      /** Full Name */
      full_name: string | null;
      /** Birth Date */
      birth_date: string | null;
      /** City */
      city: string | null;
      /** About */
      about: string | null;
      /** Telegram */
      telegram: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Entity ID
       * Format: uuid4
       * @description Unique identifier for the entity in UUID4 format.
       */
      id: string;
      /** Username */
      username: string;
      /**
       * User email
       * Format: email
       */
      email: string;
      role: components["schemas"]["UserRole"] | null;
      /** Is Verified */
      is_verified: boolean;
      /** Is Verified Agent */
      is_verified_agent: boolean | null;
      /** @default active */
      status: components["schemas"]["MemberStatusEnum"];
      resume: components["schemas"]["ResumeResponse"];
    };
    /**
     * MemberStatusEnum
     * @enum {string}
     */
    MemberStatusEnum: "active" | "in_check";
    /**
     * OTPResponse
     * @description Represents a response containing One-Time Password (OTP) expiration datetime.
     */
    OTPResponse: {
      /**
       * Expires At
       * Format: date-time
       */
      expires_at: string;
    };
    /** PaginationResponse */
    PaginationResponse: {
      /** Total Items */
      total_items: number;
      /** Total Pages */
      total_pages: number;
      /** Current Page */
      current_page: number;
      /** Per Page */
      per_page: number;
      /** Has Next Page */
      has_next_page: boolean;
      /** Has Prev Page */
      has_prev_page: boolean;
      /** Next Page */
      next_page: number | null;
      /** Prev Page */
      prev_page: number | null;
    };
    /** ResumeCreateRequest */
    ResumeCreateRequest: {
      /**
       * Title
       * @description Resume item title
       */
      role: string;
      /**
       * List of skills
       * @description List of resume skills
       */
      skills: string[];
      education: components["schemas"]["ResumeEducation"];
      /** Experience */
      experience: components["schemas"]["ExperienceItem"][] | null;
      /** Achievements */
      achievements: components["schemas"]["AchievementItem"][] | null;
      /** Additional Education */
      additional_education:
        | components["schemas"]["AdditionalEducationItem"][]
        | null;
      /**
       * Is Public
       * @default true
       */
      is_public: boolean;
      /**
       * Is Parsed
       * @default false
       */
      is_parsed: boolean;
    };
    /** ResumeEducation */
    ResumeEducation: {
      type: components["schemas"]["EducationType"];
      /**
       * Title
       * @description Resume item title
       */
      title: string;
      /**
       * The end year of education
       * @description The end year of education should be maximum 80 years ago and 10 years in the future.
       */
      end_year: number;
    };
    /** ResumeParseFromGithubRequest */
    ResumeParseFromGithubRequest: {
      /**
       * GitHub link
       * @description Link to GitHub profile
       */
      url: string;
    };
    /** ResumeParseFromHeadHunterRequest */
    ResumeParseFromHeadHunterRequest: {
      /**
       * HeadHunter link
       * @description Link to headhunter resume. The visibility of the resume should be "available by reference"
       */
      url: string;
    };
    /** ResumeParsedResponse */
    ResumeParsedResponse: {
      /** Role */
      role: string | null;
      /** Skills */
      skills: string[] | null;
      education: components["schemas"]["ResumeEducation"] | null;
      /** Experience */
      experience: components["schemas"]["ExperienceItem"][] | null;
      /** Achievements */
      achievements: components["schemas"]["AchievementItem"][] | null;
      /** Additional Education */
      additional_education:
        | components["schemas"]["AdditionalEducationItem"][]
        | null;
      /**
       * Is Public
       * @default true
       */
      is_public: boolean;
      /**
       * Is Parsed
       * @default true
       */
      is_parsed: boolean;
    };
    /** ResumeResponse */
    ResumeResponse: {
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Entity ID
       * Format: uuid4
       * @description Unique identifier for the entity in UUID4 format.
       */
      id: string;
      /**
       * Entity ID
       * Format: uuid4
       * @description Unique identifier for the entity in UUID4 format.
       */
      owner_id: string;
      personal_data: components["schemas"]["ResumeUserPersonalDataResponse"];
      /**
       * Title
       * @description Resume item title
       */
      role: string;
      /**
       * List of skills
       * @description List of resume skills
       */
      skills: string[];
      education: components["schemas"]["ResumeEducation"];
      /** Experience */
      experience: components["schemas"]["ExperienceItem"][] | null;
      /** Achievements */
      achievements: components["schemas"]["AchievementItem"][] | null;
      /** Additional Education */
      additional_education:
        | components["schemas"]["AdditionalEducationItem"][]
        | null;
      /**
       * Is Public
       * @default true
       */
      is_public: boolean;
    };
    /** ResumeUpdateRequest */
    ResumeUpdateRequest: {
      /**
       * Title
       * @description Resume item title
       */
      role: string;
      /**
       * List of skills
       * @description List of resume skills
       */
      skills: string[];
      education: components["schemas"]["ResumeEducation"];
      /** Experience */
      experience: components["schemas"]["ExperienceItem"][] | null;
      /** Achievements */
      achievements: components["schemas"]["AchievementItem"][] | null;
      /** Additional Education */
      additional_education:
        | components["schemas"]["AdditionalEducationItem"][]
        | null;
      /** Is Public */
      is_public: boolean;
    };
    /** ResumeUserPersonalDataResponse */
    ResumeUserPersonalDataResponse: {
      /** Full Name */
      full_name: string | null;
      /** Birth Date */
      birth_date: string | null;
      /** City */
      city: string | null;
      /** About */
      about: string | null;
      /** Telegram */
      telegram: string | null;
    };
    /** ResumesPaginationResponse */
    ResumesPaginationResponse: {
      /** Resumes */
      resumes: components["schemas"]["ResumeResponse"][];
      pagination: components["schemas"]["PaginationResponse"];
    };
    /**
     * StatusEnum
     * @enum {string}
     */
    StatusEnum: "active" | "in_check" | "finished";
    /** TeamAddUserRequest */
    TeamAddUserRequest: {
      /**
       * Entity ID
       * Format: uuid4
       * @description Unique identifier for the entity in UUID4 format.
       */
      user_id: string;
      /**
       * Entity ID
       * Format: uuid4
       * @description Unique identifier for the entity in UUID4 format.
       */
      resume_id: string;
    };
    /** TeamCreateRequest */
    TeamCreateRequest: {
      /**
       * Title
       * @description Team title
       */
      title: string;
      /** About */
      about: string | null;
      /** Tasks */
      tasks: string | null;
      /**
       * Entity ID
       * Format: uuid4
       * @description Unique identifier for the entity in UUID4 format.
       */
      lead_resume_id: string;
    };
    /** TeamResponse */
    TeamResponse: {
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Entity ID
       * Format: uuid4
       * @description Unique identifier for the entity in UUID4 format.
       */
      id: string;
      /**
       * Title
       * @description Team title
       */
      title: string;
      /** About */
      about: string | null;
      /** Tasks */
      tasks: string | null;
      /**
       * Entity ID
       * Format: uuid4
       * @description Unique identifier for the entity in UUID4 format.
       */
      leader_id: string;
      status: components["schemas"]["StatusEnum"];
      /** Users */
      users: components["schemas"]["MemberResponse"][];
    };
    /** TeamUpdateRequest */
    TeamUpdateRequest: {
      /**
       * Title
       * @description Team title
       */
      title: string;
      /** About */
      about: string | null;
      /** Tasks */
      tasks: string | null;
    };
    /** UserRegistrationConflictResponse */
    UserRegistrationConflictResponse: {
      /**
       * Subject
       * @description The field that caused the conflict.
       * @enum {string}
       */
      subject: "email" | "username";
      /**
       * Message
       * @description Human-readable error message describing the conflict.
       */
      message: string;
    };
    /**
     * UserRegistrationRequest
     * @description Represents the user registration details.
     */
    UserRegistrationRequest: {
      /** Username */
      username: string;
      /**
       * User email
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
    };
    /**
     * UserResponse
     * @description Represents the public response data for a user.
     */
    UserResponse: {
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Entity ID
       * Format: uuid4
       * @description Unique identifier for the entity in UUID4 format.
       */
      id: string;
      /** Username */
      username: string;
      /**
       * User email
       * Format: email
       */
      email: string;
      role: components["schemas"]["UserRole"] | null;
      /** About */
      about: string | null;
      /** Is Verified */
      is_verified: boolean;
      /** Is Verified Agent */
      is_verified_agent: boolean | null;
    };
    /**
     * UserRole
     * @enum {string}
     */
    UserRole: "admin" | "agent" | "mentor" | "participant";
    /**
     * UserStatsResponse
     * @description Represents the user stats details.
     */
    UserStatsResponse: {
      /** Resumes */
      resumes: number;
    };
    /**
     * UsersPaginationResponse
     * @description Represents the public response data for a list of users.
     */
    UsersPaginationResponse: {
      /** Users */
      users: components["schemas"]["UserResponse"][];
      pagination: components["schemas"]["PaginationResponse"];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type AccessTokenResponse = components["schemas"]["AccessTokenResponse"];
export type AchievementItem = components["schemas"]["AchievementItem"];
export type AdditionalEducationItem =
  components["schemas"]["AdditionalEducationItem"];
export type BodyLoginAuthLoginPost =
  components["schemas"]["Body_login_auth_login_post"];
export type BodyParseResumeFromPdfResumesParsePdfPost =
  components["schemas"]["Body_parse_resume_from_pdf_resumes_parse_pdf_post"];
export type CurrentUserPasswordUpdateRequest =
  components["schemas"]["CurrentUserPasswordUpdateRequest"];
export type CurrentUserPersonalDataRequest =
  components["schemas"]["CurrentUserPersonalDataRequest"];
export type CurrentUserPersonalDataResponse =
  components["schemas"]["CurrentUserPersonalDataResponse"];
export type CurrentUserPersonalDataUpdateRequest =
  components["schemas"]["CurrentUserPersonalDataUpdateRequest"];
export type CurrentUserResponse = components["schemas"]["CurrentUserResponse"];
export type CurrentUserRoleUpdateRequest =
  components["schemas"]["CurrentUserRoleUpdateRequest"];
export type CurrentUserUsernameUpdateRequest =
  components["schemas"]["CurrentUserUsernameUpdateRequest"];
export type CurrentUserVerifyRequest =
  components["schemas"]["CurrentUserVerifyRequest"];
export type EducationType = components["schemas"]["EducationType"];
export type ExperienceItem = components["schemas"]["ExperienceItem"];
export type HttpValidationError = components["schemas"]["HTTPValidationError"];
export type MemberResponse = components["schemas"]["MemberResponse"];
export type MemberStatusEnum = components["schemas"]["MemberStatusEnum"];
export type OtpResponse = components["schemas"]["OTPResponse"];
export type PaginationResponse = components["schemas"]["PaginationResponse"];
export type ResumeCreateRequest = components["schemas"]["ResumeCreateRequest"];
export type ResumeEducation = components["schemas"]["ResumeEducation"];
export type ResumeParseFromGithubRequest =
  components["schemas"]["ResumeParseFromGithubRequest"];
export type ResumeParseFromHeadHunterRequest =
  components["schemas"]["ResumeParseFromHeadHunterRequest"];
export type ResumeParsedResponse =
  components["schemas"]["ResumeParsedResponse"];
export type ResumeResponse = components["schemas"]["ResumeResponse"];
export type ResumeUpdateRequest = components["schemas"]["ResumeUpdateRequest"];
export type ResumeUserPersonalDataResponse =
  components["schemas"]["ResumeUserPersonalDataResponse"];
export type ResumesPaginationResponse =
  components["schemas"]["ResumesPaginationResponse"];
export type StatusEnum = components["schemas"]["StatusEnum"];
export type TeamAddUserRequest = components["schemas"]["TeamAddUserRequest"];
export type TeamCreateRequest = components["schemas"]["TeamCreateRequest"];
export type TeamResponse = components["schemas"]["TeamResponse"];
export type TeamUpdateRequest = components["schemas"]["TeamUpdateRequest"];
export type UserRegistrationConflictResponse =
  components["schemas"]["UserRegistrationConflictResponse"];
export type UserRegistrationRequest =
  components["schemas"]["UserRegistrationRequest"];
export type UserResponse = components["schemas"]["UserResponse"];
export type UserRole = components["schemas"]["UserRole"];
export type UserStatsResponse = components["schemas"]["UserStatsResponse"];
export type UsersPaginationResponse =
  components["schemas"]["UsersPaginationResponse"];
export type ValidationError = components["schemas"]["ValidationError"];
export type $defs = Record<string, never>;
export interface operations {
  register_auth_register_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRegistrationRequest"];
      };
    };
    responses: {
      /** @description Registraton was successful */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AccessTokenResponse"];
        };
      };
      /** @description Username or email already registered */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserRegistrationConflictResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  login_auth_login_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_login_auth_login_post"];
      };
    };
    responses: {
      /** @description Login was successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AccessTokenResponse"];
        };
      };
      /** @description Incorrect username or password */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Administrators are not allowed to log in */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  send_otp_auth_otp_send_post: {
    parameters: {
      query?: never;
      header?: {
        /** @description User time zone */
        "X-Timezone"?:
          | "Africa/Abidjan"
          | "Africa/Accra"
          | "Africa/Addis_Ababa"
          | "Africa/Algiers"
          | "Africa/Asmara"
          | "Africa/Asmera"
          | "Africa/Bamako"
          | "Africa/Bangui"
          | "Africa/Banjul"
          | "Africa/Bissau"
          | "Africa/Blantyre"
          | "Africa/Brazzaville"
          | "Africa/Bujumbura"
          | "Africa/Cairo"
          | "Africa/Casablanca"
          | "Africa/Ceuta"
          | "Africa/Conakry"
          | "Africa/Dakar"
          | "Africa/Dar_es_Salaam"
          | "Africa/Djibouti"
          | "Africa/Douala"
          | "Africa/El_Aaiun"
          | "Africa/Freetown"
          | "Africa/Gaborone"
          | "Africa/Harare"
          | "Africa/Johannesburg"
          | "Africa/Juba"
          | "Africa/Kampala"
          | "Africa/Khartoum"
          | "Africa/Kigali"
          | "Africa/Kinshasa"
          | "Africa/Lagos"
          | "Africa/Libreville"
          | "Africa/Lome"
          | "Africa/Luanda"
          | "Africa/Lubumbashi"
          | "Africa/Lusaka"
          | "Africa/Malabo"
          | "Africa/Maputo"
          | "Africa/Maseru"
          | "Africa/Mbabane"
          | "Africa/Mogadishu"
          | "Africa/Monrovia"
          | "Africa/Nairobi"
          | "Africa/Ndjamena"
          | "Africa/Niamey"
          | "Africa/Nouakchott"
          | "Africa/Ouagadougou"
          | "Africa/Porto-Novo"
          | "Africa/Sao_Tome"
          | "Africa/Timbuktu"
          | "Africa/Tripoli"
          | "Africa/Tunis"
          | "Africa/Windhoek"
          | "America/Adak"
          | "America/Anchorage"
          | "America/Anguilla"
          | "America/Antigua"
          | "America/Araguaina"
          | "America/Argentina/Buenos_Aires"
          | "America/Argentina/Catamarca"
          | "America/Argentina/ComodRivadavia"
          | "America/Argentina/Cordoba"
          | "America/Argentina/Jujuy"
          | "America/Argentina/La_Rioja"
          | "America/Argentina/Mendoza"
          | "America/Argentina/Rio_Gallegos"
          | "America/Argentina/Salta"
          | "America/Argentina/San_Juan"
          | "America/Argentina/San_Luis"
          | "America/Argentina/Tucuman"
          | "America/Argentina/Ushuaia"
          | "America/Aruba"
          | "America/Asuncion"
          | "America/Atikokan"
          | "America/Atka"
          | "America/Bahia"
          | "America/Bahia_Banderas"
          | "America/Barbados"
          | "America/Belem"
          | "America/Belize"
          | "America/Blanc-Sablon"
          | "America/Boa_Vista"
          | "America/Bogota"
          | "America/Boise"
          | "America/Buenos_Aires"
          | "America/Cambridge_Bay"
          | "America/Campo_Grande"
          | "America/Cancun"
          | "America/Caracas"
          | "America/Catamarca"
          | "America/Cayenne"
          | "America/Cayman"
          | "America/Chicago"
          | "America/Chihuahua"
          | "America/Ciudad_Juarez"
          | "America/Coral_Harbour"
          | "America/Cordoba"
          | "America/Costa_Rica"
          | "America/Coyhaique"
          | "America/Creston"
          | "America/Cuiaba"
          | "America/Curacao"
          | "America/Danmarkshavn"
          | "America/Dawson"
          | "America/Dawson_Creek"
          | "America/Denver"
          | "America/Detroit"
          | "America/Dominica"
          | "America/Edmonton"
          | "America/Eirunepe"
          | "America/El_Salvador"
          | "America/Ensenada"
          | "America/Fort_Nelson"
          | "America/Fort_Wayne"
          | "America/Fortaleza"
          | "America/Glace_Bay"
          | "America/Godthab"
          | "America/Goose_Bay"
          | "America/Grand_Turk"
          | "America/Grenada"
          | "America/Guadeloupe"
          | "America/Guatemala"
          | "America/Guayaquil"
          | "America/Guyana"
          | "America/Halifax"
          | "America/Havana"
          | "America/Hermosillo"
          | "America/Indiana/Indianapolis"
          | "America/Indiana/Knox"
          | "America/Indiana/Marengo"
          | "America/Indiana/Petersburg"
          | "America/Indiana/Tell_City"
          | "America/Indiana/Vevay"
          | "America/Indiana/Vincennes"
          | "America/Indiana/Winamac"
          | "America/Indianapolis"
          | "America/Inuvik"
          | "America/Iqaluit"
          | "America/Jamaica"
          | "America/Jujuy"
          | "America/Juneau"
          | "America/Kentucky/Louisville"
          | "America/Kentucky/Monticello"
          | "America/Knox_IN"
          | "America/Kralendijk"
          | "America/La_Paz"
          | "America/Lima"
          | "America/Los_Angeles"
          | "America/Louisville"
          | "America/Lower_Princes"
          | "America/Maceio"
          | "America/Managua"
          | "America/Manaus"
          | "America/Marigot"
          | "America/Martinique"
          | "America/Matamoros"
          | "America/Mazatlan"
          | "America/Mendoza"
          | "America/Menominee"
          | "America/Merida"
          | "America/Metlakatla"
          | "America/Mexico_City"
          | "America/Miquelon"
          | "America/Moncton"
          | "America/Monterrey"
          | "America/Montevideo"
          | "America/Montreal"
          | "America/Montserrat"
          | "America/Nassau"
          | "America/New_York"
          | "America/Nipigon"
          | "America/Nome"
          | "America/Noronha"
          | "America/North_Dakota/Beulah"
          | "America/North_Dakota/Center"
          | "America/North_Dakota/New_Salem"
          | "America/Nuuk"
          | "America/Ojinaga"
          | "America/Panama"
          | "America/Pangnirtung"
          | "America/Paramaribo"
          | "America/Phoenix"
          | "America/Port-au-Prince"
          | "America/Port_of_Spain"
          | "America/Porto_Acre"
          | "America/Porto_Velho"
          | "America/Puerto_Rico"
          | "America/Punta_Arenas"
          | "America/Rainy_River"
          | "America/Rankin_Inlet"
          | "America/Recife"
          | "America/Regina"
          | "America/Resolute"
          | "America/Rio_Branco"
          | "America/Rosario"
          | "America/Santa_Isabel"
          | "America/Santarem"
          | "America/Santiago"
          | "America/Santo_Domingo"
          | "America/Sao_Paulo"
          | "America/Scoresbysund"
          | "America/Shiprock"
          | "America/Sitka"
          | "America/St_Barthelemy"
          | "America/St_Johns"
          | "America/St_Kitts"
          | "America/St_Lucia"
          | "America/St_Thomas"
          | "America/St_Vincent"
          | "America/Swift_Current"
          | "America/Tegucigalpa"
          | "America/Thule"
          | "America/Thunder_Bay"
          | "America/Tijuana"
          | "America/Toronto"
          | "America/Tortola"
          | "America/Vancouver"
          | "America/Virgin"
          | "America/Whitehorse"
          | "America/Winnipeg"
          | "America/Yakutat"
          | "America/Yellowknife"
          | "Antarctica/Casey"
          | "Antarctica/Davis"
          | "Antarctica/DumontDUrville"
          | "Antarctica/Macquarie"
          | "Antarctica/Mawson"
          | "Antarctica/McMurdo"
          | "Antarctica/Palmer"
          | "Antarctica/Rothera"
          | "Antarctica/South_Pole"
          | "Antarctica/Syowa"
          | "Antarctica/Troll"
          | "Antarctica/Vostok"
          | "Arctic/Longyearbyen"
          | "Asia/Aden"
          | "Asia/Almaty"
          | "Asia/Amman"
          | "Asia/Anadyr"
          | "Asia/Aqtau"
          | "Asia/Aqtobe"
          | "Asia/Ashgabat"
          | "Asia/Ashkhabad"
          | "Asia/Atyrau"
          | "Asia/Baghdad"
          | "Asia/Bahrain"
          | "Asia/Baku"
          | "Asia/Bangkok"
          | "Asia/Barnaul"
          | "Asia/Beirut"
          | "Asia/Bishkek"
          | "Asia/Brunei"
          | "Asia/Calcutta"
          | "Asia/Chita"
          | "Asia/Choibalsan"
          | "Asia/Chongqing"
          | "Asia/Chungking"
          | "Asia/Colombo"
          | "Asia/Dacca"
          | "Asia/Damascus"
          | "Asia/Dhaka"
          | "Asia/Dili"
          | "Asia/Dubai"
          | "Asia/Dushanbe"
          | "Asia/Famagusta"
          | "Asia/Gaza"
          | "Asia/Harbin"
          | "Asia/Hebron"
          | "Asia/Ho_Chi_Minh"
          | "Asia/Hong_Kong"
          | "Asia/Hovd"
          | "Asia/Irkutsk"
          | "Asia/Istanbul"
          | "Asia/Jakarta"
          | "Asia/Jayapura"
          | "Asia/Jerusalem"
          | "Asia/Kabul"
          | "Asia/Kamchatka"
          | "Asia/Karachi"
          | "Asia/Kashgar"
          | "Asia/Kathmandu"
          | "Asia/Katmandu"
          | "Asia/Khandyga"
          | "Asia/Kolkata"
          | "Asia/Krasnoyarsk"
          | "Asia/Kuala_Lumpur"
          | "Asia/Kuching"
          | "Asia/Kuwait"
          | "Asia/Macao"
          | "Asia/Macau"
          | "Asia/Magadan"
          | "Asia/Makassar"
          | "Asia/Manila"
          | "Asia/Muscat"
          | "Asia/Nicosia"
          | "Asia/Novokuznetsk"
          | "Asia/Novosibirsk"
          | "Asia/Omsk"
          | "Asia/Oral"
          | "Asia/Phnom_Penh"
          | "Asia/Pontianak"
          | "Asia/Pyongyang"
          | "Asia/Qatar"
          | "Asia/Qostanay"
          | "Asia/Qyzylorda"
          | "Asia/Rangoon"
          | "Asia/Riyadh"
          | "Asia/Saigon"
          | "Asia/Sakhalin"
          | "Asia/Samarkand"
          | "Asia/Seoul"
          | "Asia/Shanghai"
          | "Asia/Singapore"
          | "Asia/Srednekolymsk"
          | "Asia/Taipei"
          | "Asia/Tashkent"
          | "Asia/Tbilisi"
          | "Asia/Tehran"
          | "Asia/Tel_Aviv"
          | "Asia/Thimbu"
          | "Asia/Thimphu"
          | "Asia/Tokyo"
          | "Asia/Tomsk"
          | "Asia/Ujung_Pandang"
          | "Asia/Ulaanbaatar"
          | "Asia/Ulan_Bator"
          | "Asia/Urumqi"
          | "Asia/Ust-Nera"
          | "Asia/Vientiane"
          | "Asia/Vladivostok"
          | "Asia/Yakutsk"
          | "Asia/Yangon"
          | "Asia/Yekaterinburg"
          | "Asia/Yerevan"
          | "Atlantic/Azores"
          | "Atlantic/Bermuda"
          | "Atlantic/Canary"
          | "Atlantic/Cape_Verde"
          | "Atlantic/Faeroe"
          | "Atlantic/Faroe"
          | "Atlantic/Jan_Mayen"
          | "Atlantic/Madeira"
          | "Atlantic/Reykjavik"
          | "Atlantic/South_Georgia"
          | "Atlantic/St_Helena"
          | "Atlantic/Stanley"
          | "Australia/ACT"
          | "Australia/Adelaide"
          | "Australia/Brisbane"
          | "Australia/Broken_Hill"
          | "Australia/Canberra"
          | "Australia/Currie"
          | "Australia/Darwin"
          | "Australia/Eucla"
          | "Australia/Hobart"
          | "Australia/LHI"
          | "Australia/Lindeman"
          | "Australia/Lord_Howe"
          | "Australia/Melbourne"
          | "Australia/NSW"
          | "Australia/North"
          | "Australia/Perth"
          | "Australia/Queensland"
          | "Australia/South"
          | "Australia/Sydney"
          | "Australia/Tasmania"
          | "Australia/Victoria"
          | "Australia/West"
          | "Australia/Yancowinna"
          | "Brazil/Acre"
          | "Brazil/DeNoronha"
          | "Brazil/East"
          | "Brazil/West"
          | "CET"
          | "CST6CDT"
          | "Canada/Atlantic"
          | "Canada/Central"
          | "Canada/Eastern"
          | "Canada/Mountain"
          | "Canada/Newfoundland"
          | "Canada/Pacific"
          | "Canada/Saskatchewan"
          | "Canada/Yukon"
          | "Chile/Continental"
          | "Chile/EasterIsland"
          | "Cuba"
          | "EET"
          | "EST"
          | "EST5EDT"
          | "Egypt"
          | "Eire"
          | "Etc/GMT"
          | "Etc/GMT+0"
          | "Etc/GMT+1"
          | "Etc/GMT+10"
          | "Etc/GMT+11"
          | "Etc/GMT+12"
          | "Etc/GMT+2"
          | "Etc/GMT+3"
          | "Etc/GMT+4"
          | "Etc/GMT+5"
          | "Etc/GMT+6"
          | "Etc/GMT+7"
          | "Etc/GMT+8"
          | "Etc/GMT+9"
          | "Etc/GMT-0"
          | "Etc/GMT-1"
          | "Etc/GMT-10"
          | "Etc/GMT-11"
          | "Etc/GMT-12"
          | "Etc/GMT-13"
          | "Etc/GMT-14"
          | "Etc/GMT-2"
          | "Etc/GMT-3"
          | "Etc/GMT-4"
          | "Etc/GMT-5"
          | "Etc/GMT-6"
          | "Etc/GMT-7"
          | "Etc/GMT-8"
          | "Etc/GMT-9"
          | "Etc/GMT0"
          | "Etc/Greenwich"
          | "Etc/UCT"
          | "Etc/UTC"
          | "Etc/Universal"
          | "Etc/Zulu"
          | "Europe/Amsterdam"
          | "Europe/Andorra"
          | "Europe/Astrakhan"
          | "Europe/Athens"
          | "Europe/Belfast"
          | "Europe/Belgrade"
          | "Europe/Berlin"
          | "Europe/Bratislava"
          | "Europe/Brussels"
          | "Europe/Bucharest"
          | "Europe/Budapest"
          | "Europe/Busingen"
          | "Europe/Chisinau"
          | "Europe/Copenhagen"
          | "Europe/Dublin"
          | "Europe/Gibraltar"
          | "Europe/Guernsey"
          | "Europe/Helsinki"
          | "Europe/Isle_of_Man"
          | "Europe/Istanbul"
          | "Europe/Jersey"
          | "Europe/Kaliningrad"
          | "Europe/Kiev"
          | "Europe/Kirov"
          | "Europe/Kyiv"
          | "Europe/Lisbon"
          | "Europe/Ljubljana"
          | "Europe/London"
          | "Europe/Luxembourg"
          | "Europe/Madrid"
          | "Europe/Malta"
          | "Europe/Mariehamn"
          | "Europe/Minsk"
          | "Europe/Monaco"
          | "Europe/Moscow"
          | "Europe/Nicosia"
          | "Europe/Oslo"
          | "Europe/Paris"
          | "Europe/Podgorica"
          | "Europe/Prague"
          | "Europe/Riga"
          | "Europe/Rome"
          | "Europe/Samara"
          | "Europe/San_Marino"
          | "Europe/Sarajevo"
          | "Europe/Saratov"
          | "Europe/Simferopol"
          | "Europe/Skopje"
          | "Europe/Sofia"
          | "Europe/Stockholm"
          | "Europe/Tallinn"
          | "Europe/Tirane"
          | "Europe/Tiraspol"
          | "Europe/Ulyanovsk"
          | "Europe/Uzhgorod"
          | "Europe/Vaduz"
          | "Europe/Vatican"
          | "Europe/Vienna"
          | "Europe/Vilnius"
          | "Europe/Volgograd"
          | "Europe/Warsaw"
          | "Europe/Zagreb"
          | "Europe/Zaporozhye"
          | "Europe/Zurich"
          | "Factory"
          | "GB"
          | "GB-Eire"
          | "GMT"
          | "GMT+0"
          | "GMT-0"
          | "GMT0"
          | "Greenwich"
          | "HST"
          | "Hongkong"
          | "Iceland"
          | "Indian/Antananarivo"
          | "Indian/Chagos"
          | "Indian/Christmas"
          | "Indian/Cocos"
          | "Indian/Comoro"
          | "Indian/Kerguelen"
          | "Indian/Mahe"
          | "Indian/Maldives"
          | "Indian/Mauritius"
          | "Indian/Mayotte"
          | "Indian/Reunion"
          | "Iran"
          | "Israel"
          | "Jamaica"
          | "Japan"
          | "Kwajalein"
          | "Libya"
          | "MET"
          | "MST"
          | "MST7MDT"
          | "Mexico/BajaNorte"
          | "Mexico/BajaSur"
          | "Mexico/General"
          | "NZ"
          | "NZ-CHAT"
          | "Navajo"
          | "PRC"
          | "PST8PDT"
          | "Pacific/Apia"
          | "Pacific/Auckland"
          | "Pacific/Bougainville"
          | "Pacific/Chatham"
          | "Pacific/Chuuk"
          | "Pacific/Easter"
          | "Pacific/Efate"
          | "Pacific/Enderbury"
          | "Pacific/Fakaofo"
          | "Pacific/Fiji"
          | "Pacific/Funafuti"
          | "Pacific/Galapagos"
          | "Pacific/Gambier"
          | "Pacific/Guadalcanal"
          | "Pacific/Guam"
          | "Pacific/Honolulu"
          | "Pacific/Johnston"
          | "Pacific/Kanton"
          | "Pacific/Kiritimati"
          | "Pacific/Kosrae"
          | "Pacific/Kwajalein"
          | "Pacific/Majuro"
          | "Pacific/Marquesas"
          | "Pacific/Midway"
          | "Pacific/Nauru"
          | "Pacific/Niue"
          | "Pacific/Norfolk"
          | "Pacific/Noumea"
          | "Pacific/Pago_Pago"
          | "Pacific/Palau"
          | "Pacific/Pitcairn"
          | "Pacific/Pohnpei"
          | "Pacific/Ponape"
          | "Pacific/Port_Moresby"
          | "Pacific/Rarotonga"
          | "Pacific/Saipan"
          | "Pacific/Samoa"
          | "Pacific/Tahiti"
          | "Pacific/Tarawa"
          | "Pacific/Tongatapu"
          | "Pacific/Truk"
          | "Pacific/Wake"
          | "Pacific/Wallis"
          | "Pacific/Yap"
          | "Poland"
          | "Portugal"
          | "ROC"
          | "ROK"
          | "Singapore"
          | "Turkey"
          | "UCT"
          | "US/Alaska"
          | "US/Aleutian"
          | "US/Arizona"
          | "US/Central"
          | "US/East-Indiana"
          | "US/Eastern"
          | "US/Hawaii"
          | "US/Indiana-Starke"
          | "US/Michigan"
          | "US/Mountain"
          | "US/Pacific"
          | "US/Samoa"
          | "UTC"
          | "Universal"
          | "W-SU"
          | "WET"
          | "Zulu";
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Code successfully sent */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OTPResponse"];
        };
      };
      /** @description Not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_current_user_users_me_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CurrentUserResponse"];
        };
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  update_current_user_username_users_me_username_patch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrentUserUsernameUpdateRequest"];
      };
    };
    responses: {
      /** @description Username successfully updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Username already registered */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_current_user_password_users_me_password_patch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrentUserPasswordUpdateRequest"];
      };
    };
    responses: {
      /** @description Password successfully updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_current_user_role_users_me_role_patch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrentUserRoleUpdateRequest"];
      };
    };
    responses: {
      /** @description Role successfully updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  verify_users_me_verify_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrentUserVerifyRequest"];
      };
    };
    responses: {
      /** @description User successfully verified */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The One-Time Password (OTP) is incorrect or expired */
      406: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_current_user_resumes_users_me_resumes_get: {
    parameters: {
      query?: {
        q?: string | null;
        offset?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResumesPaginationResponse"];
        };
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_current_user_personal_data_users_me_personal_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CurrentUserPersonalDataResponse"];
        };
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  set_current_user_personal_data_users_me_personal_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrentUserPersonalDataRequest"];
      };
    };
    responses: {
      /** @description Personal data has been successfully set */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Immutable personal data has already been set */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_current_user_personal_data_users_me_personal_patch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrentUserPersonalDataUpdateRequest"];
      };
    };
    responses: {
      /** @description Mutable personal data has been successfully updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_users_users_get: {
    parameters: {
      query?: {
        q?: string | null;
        offset?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UsersPaginationResponse"];
        };
      };
      /** @description No users found matching the provided search parameters */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_user_users__username__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        username: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      /** @description No user found with the provided username */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_user_resumes_users__username__resumes_get: {
    parameters: {
      query?: {
        q?: string | null;
        offset?: number;
        limit?: number;
      };
      header?: never;
      path: {
        username: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResumesPaginationResponse"];
        };
      };
      /** @description No user found with the provided username */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_resume_resumes_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResumeCreateRequest"];
      };
    };
    responses: {
      /** @description Resume successful created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResumeResponse"];
        };
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resume with this role already exists. Use PUT method to update it. */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_roles_resumes_roles_get: {
    parameters: {
      query?: {
        q?: string | null;
        offset?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string[];
        };
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_skills_resumes_skills_get: {
    parameters: {
      query?: {
        q?: string | null;
        offset?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string[];
        };
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_resume_resumes__resume_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        resume_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResumeResponse"];
        };
      };
      /** @description Сannot get a private resume that does not belong to the current user */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resume not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_resume_resumes__resume_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        resume_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResumeUpdateRequest"];
      };
    };
    responses: {
      /** @description Resume successfully deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Сannot edit a resume that does not belong to the current user */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resume not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resume with this role already exists. Use PUT method to update it. */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_resume_resumes__resume_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        resume_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Resume successfully deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Сannot delete a resume that does not belong to the current user */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resume not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  parse_resume_from_github_resumes_parse_github_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResumeParseFromGithubRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResumeParsedResponse"];
        };
      };
      /** @description Failed to parse resume from GitHub */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  parse_resume_from_pdf_resumes_parse_pdf_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_parse_resume_from_pdf_resumes_parse_pdf_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResumeParsedResponse"];
        };
      };
      /** @description Failed to parse resume */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description File size exceeded maximum resume size */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description File type must be application/pdf */
      415: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  parse_resume_from_headhunter_resumes_parse_hh_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResumeParseFromHeadHunterRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResumeParsedResponse"];
        };
      };
      /** @description Failed to parse resume */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Failed to verify credentials */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_teams_teams_get: {
    parameters: {
      query?: {
        q?: string | null;
        offset?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamResponse"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_team_teams_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamCreateRequest"];
      };
    };
    responses: {
      /** @description Team successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamResponse"];
        };
      };
      /** @description Resume does not belong to the current user */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Resume not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_my_teams_teams_my_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamResponse"][];
        };
      };
    };
  };
  get_team_teams__team_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamResponse"];
        };
      };
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_team_teams__team_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        team_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamUpdateRequest"];
      };
    };
    responses: {
      /** @description Team successfully updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Only team owner can update team */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_team_teams__team_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Team successfully deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Only team owner can delete team */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_team_members_teams__team_id__members_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MemberResponse"][];
        };
      };
      /** @description Team not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  add_team_member_teams__team_id__members_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        team_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamAddUserRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamResponse"];
        };
      };
      /** @description Access denied */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Team, user or resume not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User already in team */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  remove_team_member_teams__team_id__members__user_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        team_id: string;
        user_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Member successfully deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Access denied */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Team or user not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Cannot remove team owner */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
